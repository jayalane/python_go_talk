GoLang is Easy and Fun like Python
But fast; just use channels and not mutexes

Chris Lane
Computer Programmer, PayPal
chlane@paypal.com
http://github.com/jayalane/python_go_talk.git
@lanstin


* Go For Quick and Dirty Software

- syslog proxy - Filtering strings

- syslog proxy - JSON recursive editing

* Surprises

- non-atomic ints

- non-atomic maps

- data races are trivial to find

* Better go with channels/goroutines instead of mutexes

- Connection pooling - from explicit state to CS 101 code

- Websocket protocol handling - one main loop over select

* Syslog Proxy - Filtering based on strings

- there's junk that we don't want to log

- monitoring URLs

- different monitoring URLs

- URLs no one understands

* Python List filtering

.code -numbers -edit filter.py

* Syslog Proxy - Filtering

.code -numbers -edit filter.go

* Syslog Proxy - Filtering

.code -numbers -edit filter2.go

* Syslog Proxy - JSON helper

- infosec for white-list only

- people put passwords in URLs, even now

- fun recursive json function, like a warm up in Python

- in Go, don't need all the struct tagging.  A lot of code just moves stuff around

* Syslog Proxy - JSON helper (note the maybe sleep)

.code -numbers -edit json.py

* Syslog Proxy - JSON helper

.code -numbers -edit json.go

* Syslog Proxy - JSON helper

Wrapper for API - no default params

.code -numbers -edit json2.go


* Results

In 7 months, Only 12 dropped TCP connections (due to memory leak)

2073 LOC GoLang (2588 LOC Python)

Uses all 16 cores, >50% CPU each, evenly

“Total bytes write                               61749087446390” (that’s 61 Tbytes) from 1 process - no restarts

Only performance weirdness is Kafka (C) lib; each time there's a network glitch CPU jumps never to recover.

But, Go runs with no observable problems @ 100% total CPU.

* Python Infrastructure to get 1/2 of Go runtime (Gevent (IO/event loop), connection pools

[[https://github.com/PayPal/support]]  - 30KLOC code, 8KLOC test

* Surprises

- non-atomic ints

- non-atomic maps

- data races are trivial to find

* Better go with channels/goroutines instead of mutexes

- Connection pooling - from explicit state to CS 101 code

- Websocket protocol handling - one main loop over select
* From Mutexes to Channels

- Instance one - connection pools for outbound connections

- Instance two - managing websocket protocol (where in a msg read can force a close and reconnect write)

* Connection Pool Bad 1 - Variables

.code -numbers -edit conn_pool_1.go

* Connection Pool Bad 2 - Locking per conn map

.code -numbers -edit conn_pool_2.go

* Connection Pool Bad 3 - Round Robin, Might not return a conn

.code -numbers -edit conn_pool_3.go

* Connection Pool Bad 4 - Put Conn - Locking

.code -numbers -edit conn_pool_4.go

* Connection Pool Bad 5 - Send Msg - Drops

.code -numbers -edit conn_pool_5.go

* Connection Pool as Goroutine

.code -numbers -edit conn_pool_6.go

* Connection Pool as Goroutine

.code -numbers -edit conn_pool_7.go

* Websocket Loops - Port from Python

Gevent code had read loop and write loop and each handled its bit of the protocol

Synchronized List appends and IO handled sync

Go port had two goroutines each operating on the socket and also manipulating the protocol state

Close or syscall on closed FD could happen anywhere.

Added more and more mutexes and then found some protocol deadlock (I'm
waiting for read far end will never send till I send more).

* Websocket Loops - Good - Close Connection

.code -numbers -edit websocket_3.go

* Websocket Loops - Good - Read Connection, put into channel for loop

.code -numbers -edit websocket_2.go

* Websocket Loops - Good - Loop handle API calls, writes, reads

.code -numbers -edit websocket_1.go


* Websocket Loops - Good - Loop handle API calls, writes, reads 2

.code -numbers -edit websocket_1a.go

* Testing - Go overboard

.code -numbers -edit test.go

* Testing - Go overboard 2

.code -numbers -edit test2.go

* Testing - Functions as variables

.code -numbers -edit testb.go

* In sum

- I can use my whole hardware allocation

- It just stays up

- It's fast

- Instead of constantly tuning hotspots as volume grows, I can do math projects or go to meetings.